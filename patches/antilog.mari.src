// 
// AntiLog is a patch to corrupt logs on Mainframe to enhance user security a bit
// Hooks antiLog() into cmdloop(), cmdPreHandlers() and cmdPostHandlers()
if get_custom_object.indexes.indexOf("Marinette") == null then exit
Marinette = get_custom_object.Marinette




//////////////////////////////////////////////////////////// 
// Patch functionality
////////////////////////////////////////////////////////////
antiLog = function
    computer = Marinette.Mainframe.shell.host_computer

    if computer.touch("/var", "temp") != true then return print("<color=red><b>AntiLog</b>: COULD NOT CORRUPT MAINFRAME LOGS!!!")
    fd = computer.File("/var/temp")
    if not fd then return print("<color=red><b>AntiLog</b>: COULD NOT CORRUPT MAINFRAME LOGS!!!")
    fd.move("/var", "system.log")
end function




//////////////////////////////////////////////////////////// 
// Hooks
////////////////////////////////////////////////////////////

// 
// Run antiLog() when Marinette is initialized
// or when a Conditions error has taken place
_CMDLOOP = @Marinette["Console"]["cmdloop"]
Marinette.Console.cmdloop = function
    antiLog
    _CMDLOOP
end function

// 
// Run antiLog() before command execution
_CMD_PRE_HANDLERS = @Marinette["RuntimeHelpers"]["cmdPreHandlers"]
Marinette.RuntimeHelpers.cmdPreHandlers = function
    _CMD_PRE_HANDLERS
    antiLog
end function

// 
// Run antiLog() after command execution
_CMD_POST_HANDLERS = @Marinette["RuntimeHelpers"]["cmdPostHandlers"]
Marinette.RuntimeHelpers.cmdPostHandlers = function
    _CMD_POST_HANDLERS
    antiLog
end function

// 
// Run antiLog() when a command has not found or when cmd input length is zero
_CMD_FAIL_HANDLERS = @Marinette["RuntimeHelpers"]["cmdFailHandlers"]
Marinette.RuntimeHelpers.cmdFailHandlers = function
    _CMD_FAIL_HANDLERS
    antiLog
end function
